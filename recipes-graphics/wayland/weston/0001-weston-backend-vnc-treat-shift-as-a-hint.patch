From 1b05927195ab239000f16c1bdd89f7851b5f7cae Mon Sep 17 00:00:00 2001
From: Igor Opaniuk <igor.opaniuk@toradex.com>
Date: Fri, 15 May 2020 00:01:47 +0300
Subject: [PATCH] weston: backend-vnc: treat shift as a hint

Ignore shift state as per RFC6143 Section 7.5.4 [1]:

The "shift state" (i.e., whether either of the Shift keysyms is
down) should only be used as a hint when interpreting a keysym.
For example, on a US keyboard the '#' character is shifted, but on
a UK keyboard it is not.  A server with a US keyboard receiving a
'#' character from a client with a UK keyboard will not have been
sent any shift presses.  In this case, it is likely that the
server will internally need to simulate a shift press on its local
system in order to get a '#' character and not a '3'.

[1] https://tools.ietf.org/html/rfc6143#section-7.5.4

Signed-off-by: Igor Opaniuk <igor.opaniuk@toradex.com>
---
 libweston/backend-vnc/vnc.c | 285 +++++++++++++++++++-----------------
 1 file changed, 152 insertions(+), 133 deletions(-)

diff --git a/libweston/backend-vnc/vnc.c b/libweston/backend-vnc/vnc.c
index c5bd132..a6dde4d 100644
--- a/libweston/backend-vnc/vnc.c
+++ b/libweston/backend-vnc/vnc.c
@@ -101,143 +101,144 @@ static inline struct vnc_head *to_vnc_head(struct weston_head *base)
 struct vnc_keysym_to_keycode {
 	const uint32_t keysym;
 	const uint32_t code;
+	const bool shift;
 };
 
 static const
 struct vnc_keysym_to_keycode key_translation[] = {
-	{XKB_KEY_KP_Enter, 0x60},
-	{XKB_KEY_Return, 0x1c},
-	{XKB_KEY_space, 0x39},
-	{XKB_KEY_BackSpace, 0xe},
-	{XKB_KEY_Tab, 0xf},
-	{XKB_KEY_Escape, 0x1},
-	{XKB_KEY_Shift_L, 0x2a},
-	{XKB_KEY_Shift_R, 0x36},
-	{XKB_KEY_Control_L, 0x1d},
-	{XKB_KEY_Control_R, 0x9d},
-	{XKB_KEY_Alt_L, 0x38},
-	{XKB_KEY_Alt_R, 0x64},
-	{XKB_KEY_Meta_L, 0x38},
-	{XKB_KEY_Meta_R, 0x64},
-	{XKB_KEY_Super_L, 0x7d},
-	{XKB_KEY_Print, 0x63},
-	{XKB_KEY_Pause, 0x77},
-	{XKB_KEY_Caps_Lock, 0x3a},
-	{XKB_KEY_Scroll_Lock, 0x46},
-	{XKB_KEY_A, 0x1e},
-	{XKB_KEY_a, 0x1e},
-	{XKB_KEY_B, 0x30},
-	{XKB_KEY_b, 0x30},
-	{XKB_KEY_C, 0x2e},
-	{XKB_KEY_c, 0x2e},
-	{XKB_KEY_D, 0x20},
-	{XKB_KEY_d, 0x20},
-	{XKB_KEY_E, 0x12},
-	{XKB_KEY_e, 0x12},
-	{XKB_KEY_F, 0x21},
-	{XKB_KEY_f, 0x21},
-	{XKB_KEY_G, 0x22},
-	{XKB_KEY_g, 0x22},
-	{XKB_KEY_H, 0x23},
-	{XKB_KEY_h, 0x23},
-	{XKB_KEY_I, 0x17},
-	{XKB_KEY_i, 0x17},
-	{XKB_KEY_J, 0x24},
-	{XKB_KEY_j, 0x24},
-	{XKB_KEY_K, 0x25},
-	{XKB_KEY_k, 0x25},
-	{XKB_KEY_L, 0x26},
-	{XKB_KEY_l, 0x26},
-	{XKB_KEY_M, 0x32},
-	{XKB_KEY_m, 0x32},
-	{XKB_KEY_N, 0x31},
-	{XKB_KEY_n, 0x31},
-	{XKB_KEY_O, 0x18},
-	{XKB_KEY_o, 0x18},
-	{XKB_KEY_P, 0x19},
-	{XKB_KEY_p, 0x19},
-	{XKB_KEY_Q, 0x10},
-	{XKB_KEY_q, 0x10},
-	{XKB_KEY_R, 0x13},
-	{XKB_KEY_r, 0x13},
-	{XKB_KEY_S, 0x1f},
-	{XKB_KEY_s, 0x1f},
-	{XKB_KEY_T, 0x14},
-	{XKB_KEY_t, 0x14},
-	{XKB_KEY_U, 0x16},
-	{XKB_KEY_u, 0x16},
-	{XKB_KEY_V, 0x2f},
-	{XKB_KEY_v, 0x2f},
-	{XKB_KEY_W, 0x11},
-	{XKB_KEY_w, 0x11},
-	{XKB_KEY_X, 0x2d},
-	{XKB_KEY_x, 0x2d},
-	{XKB_KEY_Y, 0x15},
-	{XKB_KEY_y, 0x15},
-	{XKB_KEY_Z, 0x2c},
-	{XKB_KEY_z, 0x2c},
-	{XKB_KEY_grave, 0x29},
-	{XKB_KEY_asciitilde, 0x29},
-	{XKB_KEY_1, 0x02},
-	{XKB_KEY_exclam, 0x02},
-	{XKB_KEY_2, 0x03},
-	{XKB_KEY_at, 0x03},
-	{XKB_KEY_3, 0x04},
-	{XKB_KEY_numbersign, 0x04},
-	{XKB_KEY_4, 0x05},
-	{XKB_KEY_dollar, 0x05},
-	{XKB_KEY_5, 0x06},
-	{XKB_KEY_percent, 0x06},
-	{XKB_KEY_6, 0x07},
-	{XKB_KEY_asciicircum, 0x07},
-	{XKB_KEY_7, 0x08},
-	{XKB_KEY_ampersand, 0x08},
-	{XKB_KEY_8, 0x09},
-	{XKB_KEY_asterisk, 0x09},
-	{XKB_KEY_9, 0x0a},
-	{XKB_KEY_parenleft, 0x0a},
-	{XKB_KEY_0, 0x0b},
-	{XKB_KEY_parenright, 0x0b},
-	{XKB_KEY_minus, 0x0c},
-	{XKB_KEY_underscore, 0x0c},
-	{XKB_KEY_equal, 0x0d},
-	{XKB_KEY_plus, 0x0d},
-	{XKB_KEY_bracketleft, 0x1a},
-	{XKB_KEY_braceleft, 0x1a},
-	{XKB_KEY_bracketright, 0x1b},
-	{XKB_KEY_braceright, 0x1b},
-	{XKB_KEY_semicolon, 0x27},
-	{XKB_KEY_colon, 0x27},
-	{XKB_KEY_apostrophe, 0x28},
-	{XKB_KEY_quotedbl, 0x28},
-	{XKB_KEY_backslash, 0x2b},
-	{XKB_KEY_bar, 0x2b},
-	{XKB_KEY_comma, 0x33},
-	{XKB_KEY_less, 0x33},
-	{XKB_KEY_period, 0x34},
-	{XKB_KEY_greater, 0x34},
-	{XKB_KEY_slash, 0x35},
-	{XKB_KEY_question, 0x35},
-	{XKB_KEY_F1, 0x3b},
-	{XKB_KEY_F2, 0x3c},
-	{XKB_KEY_F3, 0x3d},
-	{XKB_KEY_F4, 0x3e},
-	{XKB_KEY_F5, 0x3f},
-	{XKB_KEY_F6, 0x40},
-	{XKB_KEY_F7, 0x41},
-	{XKB_KEY_F8, 0x42},
-	{XKB_KEY_F9, 0x43},
-	{XKB_KEY_F10, 0x44},
-	{XKB_KEY_F11, 0x57},
-	{XKB_KEY_F12, 0x58},
-	{XKB_KEY_Home, 0x66},
-	{XKB_KEY_Up, 0x67},
-	{XKB_KEY_Prior, 0x68},
-	{XKB_KEY_Left, 0x69},
-	{XKB_KEY_Right, 0x6a},
-	{XKB_KEY_End, 0x6b},
-	{XKB_KEY_Down, 0x6c},
-	{XKB_KEY_Next, 0x6d},
+	{XKB_KEY_KP_Enter,	0x60,	false	},
+	{XKB_KEY_Return,	0x1c,	false	},
+	{XKB_KEY_space,		0x39,	false	},
+	{XKB_KEY_BackSpace,	0xe,	false	},
+	{XKB_KEY_Tab,		0xf,	false	},
+	{XKB_KEY_Escape,	0x1,	false	},
+	{XKB_KEY_Shift_L,	0x2a,	false	},
+	{XKB_KEY_Shift_R,	0x36,	false	},
+	{XKB_KEY_Control_L,	0x1d,	false	},
+	{XKB_KEY_Control_R,	0x9d,	false	},
+	{XKB_KEY_Alt_L,		0x38,	false	},
+	{XKB_KEY_Alt_R,		0x64,	false	},
+	{XKB_KEY_Meta_L,	0x38,	false	},
+	{XKB_KEY_Meta_R,	0x64,	false	},
+	{XKB_KEY_Super_L,	0x7d,	false	},
+	{XKB_KEY_Print, 	0x63,	false	},
+	{XKB_KEY_Pause, 	0x77,	false	},
+	{XKB_KEY_Caps_Lock, 	0x3a,	false	},
+	{XKB_KEY_Scroll_Lock, 	0x46,	false	},
+	{XKB_KEY_A,		0x1e,	true	},
+	{XKB_KEY_a,		0x1e,	false	},
+	{XKB_KEY_B,		0x30,	true	},
+	{XKB_KEY_b,		0x30,	false	},
+	{XKB_KEY_C,		0x2e,	true	},
+	{XKB_KEY_c,		0x2e,	false	},
+	{XKB_KEY_D,		0x20,	true	},
+	{XKB_KEY_d,		0x20,	false	},
+	{XKB_KEY_E,		0x12,	true	},
+	{XKB_KEY_e,		0x12,	false	},
+	{XKB_KEY_F,		0x21,	true	},
+	{XKB_KEY_f,		0x21,	false	},
+	{XKB_KEY_G,		0x22,	true	},
+	{XKB_KEY_g,		0x22,	false	},
+	{XKB_KEY_H,		0x23,	true	},
+	{XKB_KEY_h,		0x23,	false	},
+	{XKB_KEY_I,		0x17,	true	},
+	{XKB_KEY_i,		0x17,	false	},
+	{XKB_KEY_J,		0x24,	true	},
+	{XKB_KEY_j,		0x24,	false	},
+	{XKB_KEY_K,		0x25,	true	},
+	{XKB_KEY_k,		0x25,	false	},
+	{XKB_KEY_L,		0x26,	true	},
+	{XKB_KEY_l,		0x26,	false	},
+	{XKB_KEY_M,		0x32,	true	},
+	{XKB_KEY_m,		0x32,	false	},
+	{XKB_KEY_N,		0x31,	true	},
+	{XKB_KEY_n,		0x31,	false	},
+	{XKB_KEY_O,		0x18,	true	},
+	{XKB_KEY_o,		0x18,	false	},
+	{XKB_KEY_P,		0x19,	true	},
+	{XKB_KEY_p,		0x19,	false	},
+	{XKB_KEY_Q,		0x10,	true	},
+	{XKB_KEY_q,		0x10,	false	},
+	{XKB_KEY_R,		0x13,	true	},
+	{XKB_KEY_r,		0x13,	false	},
+	{XKB_KEY_S,		0x1f,	true	},
+	{XKB_KEY_s,		0x1f,	false	},
+	{XKB_KEY_T,		0x14,	true	},
+	{XKB_KEY_t,		0x14,	false	},
+	{XKB_KEY_U,		0x16,	true	},
+	{XKB_KEY_u,		0x16,	false	},
+	{XKB_KEY_V,		0x2f,	true	},
+	{XKB_KEY_v,		0x2f,	false	},
+	{XKB_KEY_W,		0x11,	true	},
+	{XKB_KEY_w,		0x11,	false	},
+	{XKB_KEY_X,		0x2d,	true	},
+	{XKB_KEY_x,		0x2d,	false	},
+	{XKB_KEY_Y,		0x15,	true	},
+	{XKB_KEY_y,		0x15,	false	},
+	{XKB_KEY_Z,		0x2c,	true	},
+	{XKB_KEY_z,		0x2c,	false	},
+	{XKB_KEY_grave,		0x29,	false	},
+	{XKB_KEY_asciitilde,	0x29,	true	},
+	{XKB_KEY_1,		0x02,	false	},
+	{XKB_KEY_exclam,	0x02,	true	},
+	{XKB_KEY_2,		0x03,	false	},
+	{XKB_KEY_at,		0x03,	true	},
+	{XKB_KEY_3,		0x04,	false	},
+	{XKB_KEY_numbersign,	0x04,	true	},
+	{XKB_KEY_4,		0x05,	false	},
+	{XKB_KEY_dollar,	0x05,	true	},
+	{XKB_KEY_5,		0x06,	false	},
+	{XKB_KEY_percent,	0x06,	true	},
+	{XKB_KEY_6,		0x07,	false	},
+	{XKB_KEY_asciicircum,	0x07,	true	},
+	{XKB_KEY_7,		0x08,	false	},
+	{XKB_KEY_ampersand,	0x08,	true	},
+	{XKB_KEY_8,		0x09,	false	},
+	{XKB_KEY_asterisk,	0x09,	true	},
+	{XKB_KEY_9,		0x0a,	false	},
+	{XKB_KEY_parenleft,	0x0a,	true	},
+	{XKB_KEY_0,		0x0b,	false	},
+	{XKB_KEY_parenright,	0x0b,	true	},
+	{XKB_KEY_minus,		0x0c,	false,	},
+	{XKB_KEY_underscore,	0x0c,	true	},
+	{XKB_KEY_equal,		0x0d,	false	},
+	{XKB_KEY_plus,		0x0d,	true	},
+	{XKB_KEY_bracketleft,	0x1a,	false	},
+	{XKB_KEY_braceleft,	0x1a,	true	},
+	{XKB_KEY_bracketright,	0x1b,	false	},
+	{XKB_KEY_braceright,	0x1b,	true	},
+	{XKB_KEY_semicolon,	0x27,	false	},
+	{XKB_KEY_colon,		0x27,	true	},
+	{XKB_KEY_apostrophe,	0x28,	false	},
+	{XKB_KEY_quotedbl,	0x28,	true	},
+	{XKB_KEY_backslash,	0x2b,	false	},
+	{XKB_KEY_bar,		0x2b,	true	},
+	{XKB_KEY_comma,		0x33,	false	},
+	{XKB_KEY_less,		0x33,	true	},
+	{XKB_KEY_period,	0x34,	false	},
+	{XKB_KEY_greater,	0x34,	true	},
+	{XKB_KEY_slash,		0x35,	false	},
+	{XKB_KEY_question,	0x35,	true	},
+	{XKB_KEY_F1,		0x3b,	false	},
+	{XKB_KEY_F2,		0x3c,   false	},
+	{XKB_KEY_F3,		0x3d,   false	},
+	{XKB_KEY_F4,		0x3e,   false	},
+	{XKB_KEY_F5,		0x3f,   false	},
+	{XKB_KEY_F6,		0x40,   false	},
+	{XKB_KEY_F7,		0x41,   false	},
+	{XKB_KEY_F8,		0x42,   false	},
+	{XKB_KEY_F9,		0x43,   false	},
+	{XKB_KEY_F10,		0x44,   false	},
+	{XKB_KEY_F11,		0x57,   false	},
+	{XKB_KEY_F12,		0x58,   false	},
+	{XKB_KEY_Home,		0x66,   false	},
+	{XKB_KEY_Up,		0x67,   false	},
+	{XKB_KEY_Prior,		0x68,   false	},
+	{XKB_KEY_Left,		0x69,   false	},
+	{XKB_KEY_Right,		0x6a,   false	},
+	{XKB_KEY_End,		0x6b,   false	},
+	{XKB_KEY_Down,		0x6c,   false	},
+	{XKB_KEY_Next,		0x6d,   false	},
 	{ },
 };
 
@@ -246,6 +247,7 @@ vnc_handle_key_event(struct vnc_client *client, bool down_flag, uint32_t keysym)
 {
 	struct vnc_peer *peer = client->data;
 	uint32_t key = 0;
+	bool needs_shift = false;
 	enum wl_keyboard_key_state state;
 	struct timespec time;
 	int i;
@@ -255,9 +257,14 @@ vnc_handle_key_event(struct vnc_client *client, bool down_flag, uint32_t keysym)
 	else
 		state = WL_KEYBOARD_KEY_STATE_RELEASED;
 
+	/* Generally ignore shift state as per RFC6143 Section 7.5.4 */
+	if (keysym == XKB_KEY_Shift_L || keysym == XKB_KEY_Shift_R)
+		return 0;
+
 	for (i = 0; key_translation[i].keysym; i++) {
 		if (key_translation[i].keysym == keysym) {
 			key = key_translation[i].code;
+			needs_shift = key_translation[i].shift;
 			break;
 		}
 	}
@@ -266,8 +273,20 @@ vnc_handle_key_event(struct vnc_client *client, bool down_flag, uint32_t keysym)
 		weston_log("Key not found: keysym %08x, translated %08x\n",
 			    keysym, key);
 
+	/* emulate lshift press */
+	if (needs_shift)
+		notify_key(peer->seat, &time, 0x2a,
+			   WL_KEYBOARD_KEY_STATE_PRESSED,
+			   STATE_UPDATE_AUTOMATIC);
+	/* send detected key code */
 	notify_key(peer->seat, &time, key, state, STATE_UPDATE_AUTOMATIC);
 
+	/* emulate lshift release */
+	if (needs_shift)
+		notify_key(peer->seat, &time, 0x2a,
+			   WL_KEYBOARD_KEY_STATE_RELEASED,
+			   STATE_UPDATE_AUTOMATIC);
+
 	return 0;
 }
 
